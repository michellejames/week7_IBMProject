!function(){"use strict";function t(o){if(!o)throw new Error("No options passed to Waypoint constructor");if(!o.element)throw new Error("No element option passed to Waypoint constructor");if(!o.handler)throw new Error("No handler option passed to Waypoint constructor");this.key="waypoint-"+i,this.options=t.Adapter.extend({},t.defaults,o),this.element=this.options.element,this.adapter=new t.Adapter(this.element),this.callback=o.handler,this.axis=this.options.horizontal?"horizontal":"vertical",this.enabled=this.options.enabled,this.triggerPoint=null,this.group=t.Group.findOrCreate({name:this.options.group,axis:this.axis}),this.context=t.Context.findOrCreateByElement(this.options.context),t.offsetAliases[this.options.offset]&&(this.options.offset=t.offsetAliases[this.options.offset]),this.group.add(this),this.context.add(this),e[this.key]=this,i+=1}var i=0,e={};t.prototype.queueTrigger=function(t){this.group.queueTrigger(this,t)},t.prototype.trigger=function(t){this.enabled&&this.callback&&this.callback.apply(this,t)},t.prototype.destroy=function(){this.context.remove(this),this.group.remove(this),delete e[this.key]},t.prototype.disable=function(){return this.enabled=!1,this},t.prototype.enable=function(){return this.context.refresh(),this.enabled=!0,this},t.prototype.next=function(){return this.group.next(this)},t.prototype.previous=function(){return this.group.previous(this)},t.invokeAll=function(t){var i=[];for(var o in e)i.push(e[o]);for(var n=0,r=i.length;n<r;n++)i[n][t]()},t.destroyAll=function(){t.invokeAll("destroy")},t.disableAll=function(){t.invokeAll("disable")},t.enableAll=function(){t.Context.refreshAll();for(var i in e)e[i].enabled=!0;return this},t.refreshAll=function(){t.Context.refreshAll()},t.viewportHeight=function(){return window.innerHeight||document.documentElement.clientHeight},t.viewportWidth=function(){return document.documentElement.clientWidth},t.adapters=[],t.defaults={context:window,continuous:!0,enabled:!0,group:"default",horizontal:!1,offset:0},t.offsetAliases={"bottom-in-view":function(){return this.context.innerHeight()-this.adapter.outerHeight()},"right-in-view":function(){return this.context.innerWidth()-this.adapter.outerWidth()}},window.Waypoint=t}(),function(){"use strict";function t(t){window.setTimeout(t,1e3/60)}function i(t){this.element=t,this.Adapter=n.Adapter,this.adapter=new this.Adapter(t),this.key="waypoint-context-"+e,this.didScroll=!1,this.didResize=!1,this.oldScroll={x:this.adapter.scrollLeft(),y:this.adapter.scrollTop()},this.waypoints={vertical:{},horizontal:{}},t.waypointContextKey=this.key,o[t.waypointContextKey]=this,e+=1,n.windowContext||(n.windowContext=!0,n.windowContext=new i(window)),this.createThrottledScrollHandler(),this.createThrottledResizeHandler()}var e=0,o={},n=window.Waypoint,r=window.onload;i.prototype.add=function(t){var i=t.options.horizontal?"horizontal":"vertical";this.waypoints[i][t.key]=t,this.refresh()},i.prototype.checkEmpty=function(){var t=this.Adapter.isEmptyObject(this.waypoints.horizontal),i=this.Adapter.isEmptyObject(this.waypoints.vertical),e=this.element==this.element.window;t&&i&&!e&&(this.adapter.off(".waypoints"),delete o[this.key])},i.prototype.createThrottledResizeHandler=function(){function t(){i.handleResize(),i.didResize=!1}var i=this;this.adapter.on("resize.waypoints",function(){i.didResize||(i.didResize=!0,n.requestAnimationFrame(t))})},i.prototype.createThrottledScrollHandler=function(){function t(){i.handleScroll(),i.didScroll=!1}var i=this;this.adapter.on("scroll.waypoints",function(){i.didScroll&&!n.isTouch||(i.didScroll=!0,n.requestAnimationFrame(t))})},i.prototype.handleResize=function(){n.Context.refreshAll()},i.prototype.handleScroll=function(){var t={},i={horizontal:{newScroll:this.adapter.scrollLeft(),oldScroll:this.oldScroll.x,forward:"right",backward:"left"},vertical:{newScroll:this.adapter.scrollTop(),oldScroll:this.oldScroll.y,forward:"down",backward:"up"}};for(var e in i){var o=i[e],n=o.newScroll>o.oldScroll,r=n?o.forward:o.backward;for(var s in this.waypoints[e]){var a=this.waypoints[e][s];if(null!==a.triggerPoint){var h=o.oldScroll<a.triggerPoint,l=o.newScroll>=a.triggerPoint,p=h&&l,d=!h&&!l;(p||d)&&(a.queueTrigger(r),t[a.group.id]=a.group)}}}for(var c in t)t[c].flushTriggers();this.oldScroll={x:i.horizontal.newScroll,y:i.vertical.newScroll}},i.prototype.innerHeight=function(){return this.element==this.element.window?n.viewportHeight():this.adapter.innerHeight()},i.prototype.remove=function(t){delete this.waypoints[t.axis][t.key],this.checkEmpty()},i.prototype.innerWidth=function(){return this.element==this.element.window?n.viewportWidth():this.adapter.innerWidth()},i.prototype.destroy=function(){var t=[];for(var i in this.waypoints)for(var e in this.waypoints[i])t.push(this.waypoints[i][e]);for(var o=0,n=t.length;o<n;o++)t[o].destroy()},i.prototype.refresh=function(){var t,i=this.element==this.element.window,e=i?void 0:this.adapter.offset(),o={};this.handleScroll(),t={horizontal:{contextOffset:i?0:e.left,contextScroll:i?0:this.oldScroll.x,contextDimension:this.innerWidth(),oldScroll:this.oldScroll.x,forward:"right",backward:"left",offsetProp:"left"},vertical:{contextOffset:i?0:e.top,contextScroll:i?0:this.oldScroll.y,contextDimension:this.innerHeight(),oldScroll:this.oldScroll.y,forward:"down",backward:"up",offsetProp:"top"}};for(var r in t){var s=t[r];for(var a in this.waypoints[r]){var h,l,p,d,c,f=this.waypoints[r][a],u=f.options.offset,g=f.triggerPoint,m=0,w=null==g;f.element!==f.element.window&&(m=f.adapter.offset()[s.offsetProp]),"function"==typeof u?u=u.apply(f):"string"==typeof u&&(u=parseFloat(u),f.options.offset.indexOf("%")>-1&&(u=Math.ceil(s.contextDimension*u/100))),h=s.contextScroll-s.contextOffset,f.triggerPoint=Math.floor(m+h-u),l=g<s.oldScroll,p=f.triggerPoint>=s.oldScroll,d=l&&p,c=!l&&!p,!w&&d?(f.queueTrigger(s.backward),o[f.group.id]=f.group):!w&&c?(f.queueTrigger(s.forward),o[f.group.id]=f.group):w&&s.oldScroll>=f.triggerPoint&&(f.queueTrigger(s.forward),o[f.group.id]=f.group)}}return n.requestAnimationFrame(function(){for(var t in o)o[t].flushTriggers()}),this},i.findOrCreateByElement=function(t){return i.findByElement(t)||new i(t)},i.refreshAll=function(){for(var t in o)o[t].refresh()},i.findByElement=function(t){return o[t.waypointContextKey]},window.onload=function(){r&&r(),i.refreshAll()},n.requestAnimationFrame=function(i){(window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||t).call(window,i)},n.Context=i}(),function(){"use strict";function t(t,i){return t.triggerPoint-i.triggerPoint}function i(t,i){return i.triggerPoint-t.triggerPoint}function e(t){this.name=t.name,this.axis=t.axis,this.id=this.name+"-"+this.axis,this.waypoints=[],this.clearTriggerQueues(),o[this.axis][this.name]=this}var o={vertical:{},horizontal:{}},n=window.Waypoint;e.prototype.add=function(t){this.waypoints.push(t)},e.prototype.clearTriggerQueues=function(){this.triggerQueues={up:[],down:[],left:[],right:[]}},e.prototype.flushTriggers=function(){for(var e in this.triggerQueues){var o=this.triggerQueues[e],n="up"===e||"left"===e;o.sort(n?i:t);for(var r=0,s=o.length;r<s;r+=1){var a=o[r];(a.options.continuous||r===o.length-1)&&a.trigger([e])}}this.clearTriggerQueues()},e.prototype.next=function(i){this.waypoints.sort(t);var e=n.Adapter.inArray(i,this.waypoints);return e===this.waypoints.length-1?null:this.waypoints[e+1]},e.prototype.previous=function(i){this.waypoints.sort(t);var e=n.Adapter.inArray(i,this.waypoints);return e?this.waypoints[e-1]:null},e.prototype.queueTrigger=function(t,i){this.triggerQueues[i].push(t)},e.prototype.remove=function(t){var i=n.Adapter.inArray(t,this.waypoints);i>-1&&this.waypoints.splice(i,1)},e.prototype.first=function(){return this.waypoints[0]},e.prototype.last=function(){return this.waypoints[this.waypoints.length-1]},e.findOrCreate=function(t){return o[t.axis][t.name]||new e(t)},n.Group=e}(),function(){"use strict";function t(t){this.$element=i(t)}var i=window.jQuery,e=window.Waypoint;i.each(["innerHeight","innerWidth","off","offset","on","outerHeight","outerWidth","scrollLeft","scrollTop"],function(i,e){t.prototype[e]=function(){var t=Array.prototype.slice.call(arguments);return this.$element[e].apply(this.$element,t)}}),i.each(["extend","inArray","isEmptyObject"],function(e,o){t[o]=i[o]}),e.adapters.push({name:"jquery",Adapter:t}),e.Adapter=t}(),function(){"use strict";function t(t){return function(){var e=[],o=arguments[0];return t.isFunction(arguments[0])&&(o=t.extend({},arguments[1]),o.handler=arguments[0]),this.each(function(){var n=t.extend({},o,{element:this});"string"==typeof n.context&&(n.context=t(this).closest(n.context)[0]),e.push(new i(n))}),e}}var i=window.Waypoint;window.jQuery&&(window.jQuery.fn.waypoint=t(window.jQuery)),window.Zepto&&(window.Zepto.fn.waypoint=t(window.Zepto))}(),$(function(){$(".parallax-img").parallax({imageSrc:"assets/img/hackathon.jpg"})}),$(".counter").each(function(){var t=$(this),i=t.attr("data-count");$({countNum:t.text()}).animate({countNum:i},{duration:2e3,easing:"linear",step:function(){t.text(Math.floor(this.countNum))},complete:function(){t.text(this.countNum)}})}),function(t,i,e,o){function n(i,e){var r=this;"object"==typeof e&&(delete e.refresh,delete e.render,t.extend(this,e)),this.$element=t(i),!this.imageSrc&&this.$element.is("img")&&(this.imageSrc=this.$element.attr("src"));var s=(this.position+"").toLowerCase().match(/\S+/g)||[];if(s.length<1&&s.push("center"),1==s.length&&s.push(s[0]),"top"!=s[0]&&"bottom"!=s[0]&&"left"!=s[1]&&"right"!=s[1]||(s=[s[1],s[0]]),this.positionX!=o&&(s[0]=this.positionX.toLowerCase()),this.positionY!=o&&(s[1]=this.positionY.toLowerCase()),r.positionX=s[0],r.positionY=s[1],"left"!=this.positionX&&"right"!=this.positionX&&(isNaN(parseInt(this.positionX))?this.positionX="center":this.positionX=parseInt(this.positionX)),"top"!=this.positionY&&"bottom"!=this.positionY&&(isNaN(parseInt(this.positionY))?this.positionY="center":this.positionY=parseInt(this.positionY)),this.position=this.positionX+(isNaN(this.positionX)?"":"px")+" "+this.positionY+(isNaN(this.positionY)?"":"px"),navigator.userAgent.match(/(iPod|iPhone|iPad)/))return this.imageSrc&&this.iosFix&&!this.$element.is("img")&&this.$element.css({backgroundImage:"url("+this.imageSrc+")",backgroundSize:"cover",backgroundPosition:this.position}),this;if(navigator.userAgent.match(/(Android)/))return this.imageSrc&&this.androidFix&&!this.$element.is("img")&&this.$element.css({backgroundImage:"url("+this.imageSrc+")",backgroundSize:"cover",backgroundPosition:this.position}),this;this.$mirror=t("<div />").prependTo("body");var a=this.$element.find(">.parallax-slider"),h=!1;0==a.length?this.$slider=t("<img />").prependTo(this.$mirror):(this.$slider=a.prependTo(this.$mirror),h=!0),this.$mirror.addClass("parallax-mirror").css({visibility:"hidden",zIndex:this.zIndex,position:"fixed",top:0,left:0,overflow:"hidden"}),this.$slider.addClass("parallax-slider").one("load",function(){r.naturalHeight&&r.naturalWidth||(r.naturalHeight=this.naturalHeight||this.height||1,r.naturalWidth=this.naturalWidth||this.width||1),r.aspectRatio=r.naturalWidth/r.naturalHeight,n.isSetup||n.setup(),n.sliders.push(r),n.isFresh=!1,n.requestRender()}),h||(this.$slider[0].src=this.imageSrc),(this.naturalHeight&&this.naturalWidth||this.$slider[0].complete||a.length>0)&&this.$slider.trigger("load")}function r(o){return this.each(function(){var r=t(this),s="object"==typeof o&&o;this==i||this==e||r.is("body")?n.configure(s):r.data("px.parallax")?"object"==typeof o&&t.extend(r.data("px.parallax"),s):(s=t.extend({},r.data(),s),r.data("px.parallax",new n(this,s))),"string"==typeof o&&("destroy"==o?n.destroy(this):n[o]())})}!function(){for(var t=0,e=["ms","moz","webkit","o"],o=0;o<e.length&&!i.requestAnimationFrame;++o)i.requestAnimationFrame=i[e[o]+"RequestAnimationFrame"],i.cancelAnimationFrame=i[e[o]+"CancelAnimationFrame"]||i[e[o]+"CancelRequestAnimationFrame"];i.requestAnimationFrame||(i.requestAnimationFrame=function(e){var o=(new Date).getTime(),n=Math.max(0,16-(o-t)),r=i.setTimeout(function(){e(o+n)},n);return t=o+n,r}),i.cancelAnimationFrame||(i.cancelAnimationFrame=function(t){clearTimeout(t)})}(),t.extend(n.prototype,{speed:.2,bleed:0,zIndex:-100,iosFix:!0,androidFix:!0,position:"center",overScrollFix:!1,refresh:function(){this.boxWidth=this.$element.outerWidth(),this.boxHeight=this.$element.outerHeight()+2*this.bleed,this.boxOffsetTop=this.$element.offset().top-this.bleed,this.boxOffsetLeft=this.$element.offset().left,this.boxOffsetBottom=this.boxOffsetTop+this.boxHeight;var t=n.winHeight,i=n.docHeight,e=Math.min(this.boxOffsetTop,i-t),o=Math.max(this.boxOffsetTop+this.boxHeight-t,0),r=this.boxHeight+(e-o)*(1-this.speed)|0,s=(this.boxOffsetTop-e)*(1-this.speed)|0;if(r*this.aspectRatio>=this.boxWidth){this.imageWidth=r*this.aspectRatio|0,this.imageHeight=r,this.offsetBaseTop=s;var a=this.imageWidth-this.boxWidth;"left"==this.positionX?this.offsetLeft=0:"right"==this.positionX?this.offsetLeft=-a:isNaN(this.positionX)?this.offsetLeft=-a/2|0:this.offsetLeft=Math.max(this.positionX,-a)}else{this.imageWidth=this.boxWidth,this.imageHeight=this.boxWidth/this.aspectRatio|0,this.offsetLeft=0;var a=this.imageHeight-r;"top"==this.positionY?this.offsetBaseTop=s:"bottom"==this.positionY?this.offsetBaseTop=s-a:isNaN(this.positionY)?this.offsetBaseTop=s-a/2|0:this.offsetBaseTop=s+Math.max(this.positionY,-a)}},render:function(){var t=n.scrollTop,i=n.scrollLeft,e=this.overScrollFix?n.overScroll:0,o=t+n.winHeight;this.boxOffsetBottom>t&&this.boxOffsetTop<=o?(this.visibility="visible",this.mirrorTop=this.boxOffsetTop-t,this.mirrorLeft=this.boxOffsetLeft-i,this.offsetTop=this.offsetBaseTop-this.mirrorTop*(1-this.speed)):this.visibility="hidden",this.$mirror.css({transform:"translate3d(0px, 0px, 0px)",visibility:this.visibility,top:this.mirrorTop-e,left:this.mirrorLeft,height:this.boxHeight,width:this.boxWidth}),this.$slider.css({transform:"translate3d(0px, 0px, 0px)",position:"absolute",top:this.offsetTop,left:this.offsetLeft,height:this.imageHeight,width:this.imageWidth,maxWidth:"none"})}}),t.extend(n,{scrollTop:0,scrollLeft:0,winHeight:0,winWidth:0,docHeight:1<<30,docWidth:1<<30,sliders:[],isReady:!1,isFresh:!1,isBusy:!1,setup:function(){if(!this.isReady){var o=t(e),r=t(i),s=function(){n.winHeight=r.height(),n.winWidth=r.width(),n.docHeight=o.height(),n.docWidth=o.width()},a=function(){var t=r.scrollTop(),i=n.docHeight-n.winHeight,e=n.docWidth-n.winWidth;n.scrollTop=Math.max(0,Math.min(i,t)),n.scrollLeft=Math.max(0,Math.min(e,r.scrollLeft())),n.overScroll=Math.max(t-i,Math.min(t,0))};r.on("resize.px.parallax load.px.parallax",function(){s(),n.isFresh=!1,n.requestRender()}).on("scroll.px.parallax load.px.parallax",function(){a(),n.requestRender()}),s(),a(),this.isReady=!0}},configure:function(i){"object"==typeof i&&(delete i.refresh,delete i.render,t.extend(this.prototype,i))},refresh:function(){t.each(this.sliders,function(){this.refresh()}),this.isFresh=!0},render:function(){this.isFresh||this.refresh(),t.each(this.sliders,function(){this.render()})},requestRender:function(){var t=this;this.isBusy||(this.isBusy=!0,i.requestAnimationFrame(function(){t.render(),t.isBusy=!1}))},destroy:function(e){var o,r=t(e).data("px.parallax");for(r.$mirror.remove(),o=0;o<this.sliders.length;o+=1)this.sliders[o]==r&&this.sliders.splice(o,1);t(e).data("px.parallax",!1),0===this.sliders.length&&(t(i).off("scroll.px.parallax resize.px.parallax load.px.parallax"),this.isReady=!1,n.isSetup=!1)}});var s=t.fn.parallax;t.fn.parallax=r,t.fn.parallax.Constructor=n,t.fn.parallax.noConflict=function(){return t.fn.parallax=s,this},t(e).on("ready.px.parallax.data-api",function(){t('[data-parallax="scroll"]').parallax()})}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
